#!/bin/sh

CUPL_DEFAULT_OPTIONS="m1jn" #These are the options that will be passed to the CUPL.EXE compiler
CUPL_SIMULATION_OPTIONS="sw" #These options are added only if an .SI file is found.


#A summary of the most relevant/important options to CUPL is here. See documentation for a full list/explanation.
#
#-m1 quick minimization
# -l  create listing file
# -x create expanded product-terms in documentation file
# -f create fuse plot/chip diagram in documentation file
# -j create jedec file. If -s is specified, CSIM will append test vectors to the .JED file.
# -n use name of input file for output file
# -a create absolute file
# -b create berkeley pla format
# -e create expanded macro definitions
#
# -s run simulation. Expects a .SI file to be present, generates an .SO file. If -j is specified, will append test vectors to the .JED file. Automatically implies -a generation of an .ABS file.
# -w run simulation. Expects a .SI file to be present, genrates a .w file. Automatically implies -a generation of an .ABS file.

#Known issues:
#we should probably insist that the find150x.exe files be replaced with the corresponding fit150x.exe files in the fitters directory. This might be preventing the fitters from being called automatically when working with CPLD parts that use a fitter.

RED='\033[0;31m'
GRN='\033[1;32m'
CYN='\033[1;36m'
YEL='\033[1;33m'
NC='\033[0m' # No Color

printf "${CYN}5vpld CUPL Compiler Helper - A light wrapper on top of CUPL.EXE${NC}\n\n"

#Standard error regarding prerequisites
prerequisite_error()
{
    printf "\nThis script requires the following:\n"
    printf "* Wine is installed, and assumes the default prefix is used.\n"
    printf "* WinCUPL is installed into the default path of c:/Wincupl\n"
    printf "* The fitters inside of c:/Wincupl//WinCupl/Fitters/\n"
    printf "  have been replaced with the latest version (available inside Atmel Prochip)\n\n"
    printf "A future release might simply try to make this work without WinCUPL installation as only the CUPL compiler and the fitters are required.\n"
    printf "For now this remains the recommended workflow as WinCUPL does come with decent examples and help files.\n\n"
    exit 3
}

#: <<'END'

#We check the version of Wine installed:
WINE_VERSION=`wine --version`
if [ $? -ne 0 ]; then
    printf "${RED}ERROR: This script requires Wine to run. Could not determine version of wine installed.${NC}\n"
    prerequisite_error
fi

#We check to see if the latest known version of fitters are installed.
FIT1502PATH=`WINEDEBUG="fixme-hid" winepath -u "c:/Wincupl//WinCupl/Fitters/fit1502.exe"`
FIT1504PATH=`WINEDEBUG="fixme-hid" winepath -u "c:/Wincupl//WinCupl/Fitters/fit1504.exe"`
FIT1508PATH=`WINEDEBUG="fixme-hid" winepath -u "c:/Wincupl//WinCupl/Fitters/fit1508.exe"`

if [ ! -f ${FIT1502PATH} ] || [ ! -f ${FIT1504PATH} ] || [ ! -f ${FIT1508PATH} ]; then
    printf "${RED}ERROR: Could not find fitters inside of c:/Wincupl//WinCupl/Fitters/\nThis script assumes the following\n* You have installed WinCUPL into the default path c:/Wincupl${NC}\n"
    prerequisite_error
fi

SUMFAIL=false

if [ "fbcd61cd5348b05000ccad3d0e08cf8a8fb94538" != `sha1sum $FIT1502PATH | awk '{print $1}'` ]; then
    echo "FIT1502.exe checksum failure."
    SUMFAIL=true
fi

if [ "e99b14f68fa5de131aa388503535c51ecdf31295" != `sha1sum $FIT1504PATH | awk '{print $1}'` ]; then
    echo "FIT1504.exe checksum failure."
    SUMFAIL=true
fi

if [ "5f1ef6d220466dff8ac031acbce4e7a55dfed153" != `sha1sum $FIT1508PATH | awk '{print $1}'` ]; then
    echo "FIT1508.exe checksum failure."
    SUMFAIL=true
fi

if [ $SUMFAIL = "true" ]; then
    printf "${RED}ERROR: Fitter version incorrect.${NC}\n"
    echo "\nIt looks like you might be using the original fitters that came with WinCUPL.\nPlease extract and replace the fitters with the latest from:"
    echo "https://ww1.microchip.com/downloads/en/DeviceDoc/ProChip5.0.1.zip"
    echo "They should identify as \"Version 1918 (3-21-07)\" when run from the command line:"
    prerequisite_error
fi


if [ $# -ne 1 ] #Make sure we passed options to CUPL.EXE
  then
    printf "USAGE: Please pass the name of a .PLD file to be compiled. Ex:\n"
    printf "${YEL}5vcomp COUNTER.PLD${NC}\n\n"
    printf "This script will attempt to compile it using reasonable defaults passed to CUPL.EXE\n\n"
    exit 1
fi

#END

FILENAME=$1

#Since CUPL.EXE accepts files with or without a file extension, we try to do the same and append the extension if necessary.
#We'd simply pass $1 directly to CUPL.EXE but we really want to identify the actual filename as the length is important (too long or multiple periods and it breaks CSIM.EXE).
if [ ! -f "$1" ]; then
    if [ -f "${1}.pld" ]; then
	printf "${GRN}Appending .pld to input filename.${NC}\n"
        FILENAME="$1.pld"
        continue
    fi
    if [ -f "${1}.PLD" ]; then
	printf "${GRN}Appending .PLD to input filename.${NC}\n"
        FILENAME="$1.PLD"
        continue
    fi
fi

if [ ! -f "${FILENAME}" ]; then
    printf "${RED}ERROR: Cannot find file: ${FILENAME}${NC}\n"
    exit 1
fi

#Too long filenames is a horrible bug in CSIM.EXE that took forever to figure out.
if [ ${#FILENAME} -gt 19 ]; then
    printf "${RED}ERROR: Filenames longer than 19 total characters cause problems with CSIM.EXE\nUse 15 characters max for filename + 1 dot + 3 file extension.${NC}\n"
    exit 1
fi

#Multiple periods in the filename also cause CSIM.EXE to break.
if [ `echo ${FILENAME} | grep -o "\." | wc -l` -gt 1 ]; then
    printf "${RED}ERROR: Filenames containing more than one period cause problems with CSIM.EXE\nFilenames should only contain 1 period.${NC}\n"
    exit 1
fi

BASEFILENAME=${FILENAME%.*} #This strips off the file extension


#If we detect a corresponding .SI file, then we pass the -s and -w options to CUPL.EXE so that simulation is performed.
if [ -f "${BASEFILENAME}.SI" ]; then
    SIMFILENAME="${BASEFILENAME}.SI"
elif [ -f "${BASEFILENAME}.si" ]; then
    SIMFILENAME="${BASEFILENAME}.si"
else
    echo "WARNING: Corresponding .SI input file not found. Simulation / Test vector generation will not be performed."
    CUPL_SIMULATION_OPTIONS=""
fi

#Time to run CUPL.EXE
printf "${GRN}Running WinCUPL with the following command line: ${NC}\n"
echo "${YEL}c:/Wincupl/Shared/cupl.exe -${CUPL_DEFAULT_OPTIONS}${CUPL_SIMULATION_OPTIONS} -u c:/Wincupl/Shared/cupl.dl ${1}${NC}"
echo "\n"
#We supress the most common wine debug warnings as none have been found to create issues with CUPL. There is still one "fixme:imm" that seems to be coming from a child process.
WINEDEBUG="fixme-hid,fixme-ntdll,fixme-imm" wine c:/Wincupl/Shared/cupl.exe -${CUPL_DEFAULT_OPTIONS}${CUPL_SIMULATION_OPTIONS} -u c:/Wincupl/Shared/cupl.dl "${1}"

if [ $? -eq 0 ]; then
    printf "${GRN}SUCCESS: CUPL returned successfully.${NC}\n"
    printf "${GRN}A .JED file should have been produced, which can be used to program the target device.${NC}\n"
else
    printf "${RED}ERROR: CUPL returns a non-zero exit code: ${?}${NC}\n"
    if [ -n ${CUPL_SIMULATION_OPTIONS} ]; then
        printf "${RED}\nBecause simulation was requested, the problem may be limited to just the last stage (simulation)${NC}\n\n"
    fi
    printf "${RED}Check above for clues to what may have gone wrong.${NC}\n"
    printf "${RED}Please note that messages containing ':fixme:' are actually coming from Wine.\nThese ':fixme:' messages are almost certainly not the problem.${NC}\n"
    printf "${RED}Additionally, you may find this key useful to understand the various stages / modules within CUPL:\n\n\
CUPL  processor ck \n\
CUPLX preprocessor cx \n\
CUPLA source file parser ca \n\
CUPLB equation fitter cb \n\
CUPLM minimizer cm \n\
CUPLC fusemap generator cc \n\
CSIM  processor sk \n\
CSIMA logic simulator sa \n \

Finally, references to fit/find are from the Atmel fitters.${NC}

"
fi